https://thenewstack.io/the-different-token-types-and-formats-explained/

rozne typy tokenov podla toho naco sa pouzivaju:
    - access token -> typicky opaque token, autorizacia usera apinou, nie na autentifikaciu
    - bearer token -> pouzitie access tokenov, bearer tokenu ma ziska access, ziadne kontroly apinou ani aplikaciou, ze odosielatel je ten co ma dostat access
    - sender constrained tokens -> pouzije sa cryptografia aby sa token zvialal s appkou, pomocou niecoho co vie len appka - sukromny kluc
    - refresh tokens -> access tokeny maju kratku trvacnost, po ktorej uplynuti by sa musel user opat autentifikovat, preto som s access tokenom vydava aj refresh token, pomocou ktoreho ziska user novy access token bez nutnosti autentifikovania
    - id token -> jwt - info o userovi, vystup z openid connect (OIDC), sluzi len na autentifikaciu, nie autorizaciu, neposiala sa dalsej apine

formaty tokenov:
    - opaque token  (referencia) -> nahodny string, nenesie ziadnu info appke ani apine, no na overie ich platnosti treba databazu s metadami o tokenoch - vydanie, platnost, appka, token introspection
    - structured (hodnota) -> hlavicka, telo, podpis - ma vela info, musi byt encryptnuty aby nebol precitany hocikym, podpis zabezpecuje len integritu
    - phantom tokens -> kombinacia opaque a structured, pouzitie api gateway/reverse proxy medzi klintom a apinov. Klient dostane opaque token a ten posiela s requestami apine, requesty najpv idu cez proxynu a ta spravi introspection (call na dalsi servis) odkial dostane structured token a ten posle apine. Vyhoda je ze proxyna moze structured tokeny cachovat. Klient sa nedostane k citlivym udajom zo structured tokenu
    - split tokens -> rozdelenie structured tokenu na podpis a zvysok. Klient sa autentifikuje a apina mu vrati podpis z vygenerovaneho structured tokenu, podpis zahashuje a spolu so zvyskom ho posle proxyne, ktora si zacachuje tento token, hash podpisu pouzije ako kluc a zvysok ako hodnotu. Tym padom proxyna nerobi ziadne dalsie volania, iba pozera do cache a nikto nema cely token u seba.
    - token handler -> pouzitie pri single page appke. Prehliadace robia tazke pre appky pouzivat 3rd party cookies kvoli prevencii trackovania a navyse SPA nevie tak dorbe ochranit token ako cookie. Riesenie: token sa nevyda pre SPA ale pre token handler na proxy/gateway a ta vytvori cookie co posle SPA. Ked chce SPA spravit api volanie, posle cookie token handlerovi a ten spravi call

trendy API bezpenosti - https://curity.io/blog/api-security-2023-trends/?utm_source=thenewstack&utm_medium=website
    - api kluce nie su moc bezbepecne
    - treba pouzivat autentifikacnu a autorizacnu schemu na zaklade tokenov
    - jwt su fajn, ale pozuivat iba interne, neposkytovat tretim stranam, na to pouzivat opaque
        - pomocou fantom a split token vzorov sa daju pouzivat jwt u seba a opaque vonku


https://zapier.com/engineering/apikey-oauth-jwt/
    - api key -> jednoduchy sposob ako pouzivat api, staticka vec garantujuca access ku vsetkemu, bezpecnoste rizko, hlavne ak sa posiela ako query string v url, lepsie v authorization header. Pre developera fajn, pre usera nic moc, casto nevie co je api vobec a kde ma zobrat kluc.
    - OAuth - OAuth2.0 standard na autorizaciu voci apine, vyuziva access a refresh token


https://fly.io/blog/api-tokens-a-tedious-survey/
    - IAM -> identity and access management
    - JWT -> problem lebo nejasne co musis napisat, aky sifrovaci algoritmus sa pouziva, ci je symentrcke/asymetricke sifrovanie
    - PASETO -> lepsi JWT - snazi sa obmedzit co mozes pouzit a nemeni parametre ale verzionuje cely protokol, problem je ze su 4 aktivne verzie..
    - Protocol Buffer Tokens (protobuf) -> definuje silno typovany protokol format, mame token a signed token. Token - semantika => strigify, podpisem, vlozim do signed tokenu aj s podpisom.
    - CAT -> crypto auth token, cat server ma root key - apine vytvori token z tohto kluca a jej identity, appkam ktora sa autentifikuju cat serveru a budu chciet mat pristup k apine vyrobi creation key z tokenu ktory vyrobil apine, takto si vie apina lahko verifikovat token od appky, appka si vie vyrobit token pomocou HMAC z tohto creation key a svojej identity. Netreba zdielane tajomstvo pre kazde spojenie dvojice appka apina. Apina a cat server sa voci sebe autetifikuju pomocou certifikatou v TLS spojeni.
    - Macaroons -> server vie vydat golden ticket a pridat nanho ombedzenia (caveats) - kazde ombedzenia sa vyraba z predosleho mac pomoucou pridania listu obmedzeni a hmacnutia tokenu, kazdy s vyssiou urovnou vie overit
    - Biscuits -> podobne ako macaroons, ale pri pridavani obmedzeni tokenov namiesto zahashovania noveho tokenu zo stareho a obmedzeni pouzitim HMAC, vyuzivaju podpisovanie a verejne kluce, naco neexistuje moc jednoduchi sposob ako to spravit z predostleho tokenu a obmedzenia. Obmedzenia nie su len boolean ale datalogove programy

https://www.youtube.com/watch?v=dlmaujVVPII
    - o skturturovanych - nemusis mat databazu, overujes stateless, moze byt read stateless overenie, write stateful - lookup v databaze sessionov, ci je este aktualny
    - JWT -> JWE (encryption) alebo JWS (signature), vacsinou JWS - o tom bude rec
        - JOSE specs - javascript object signing and encryption
        - na skussanie jwt - https://token.dev/, dekodovanie base64 - https://codebeautify.org/base64-decode
        - hlavicka, telo, kluc -> vyrobi sa string base64 kodovanim z hlavicky a tela, oddelene bodkou, na konci podpis vyrobeny pomocou kluca
        - v hlavicke alg property - hmac (hs256)/private + public key (es512)/none(cisty JSON)
        - kluc-hodnota pary su claims - 3 typy
            - registered - kluce definovane v specke jwt
            - public - z inych protokolov (napr. OpenID connect ma name v payloade)
            - private - hocico co si dopisem
            - regitered su hlavicka (typ, alg, optional kid - id kluca pouizteho na podpis), telo(sub - komu je urceny token, nbf - not before, exp - expiration date)
        - validacia 
            - dekodujem hlavicku - mam alg, pripadne kid - vygenerujem podpis a porovnam s podpisom v tokene
            - validacia tela - dekodujem ho, skontrolujem ci som medzi nbf a exp
        - JWE este nevyse encrypted telo, jednotlive claims - ma viac sekcii v stringu (5 namiesto 3)
        - problemy - moc vela moznosti 
            - jws - 13 alg moznosti, jwe - 17 moznosti
            - none alg!!!
    - PASETO -> Platform Agnostic SEcurity TOken
        - snazi sa opravit chyby jwt
        - zjednodusuje jwt
        - paseto implementacie - https://paseto.io/
        - a skusanie tiez - https://token.dev/paseto/
        - tiez base64 zakodovane - <verzia>.<purpose>.<payload>.<footer>
            - version - 1,2,3,4 - rozlisuje krypto funkcie pouzite na podpisovanie/sifovanie
            - purpose - local/public
                - local - encrypted + shared key - kazdy lokalnou kopiou kluca vie precitat obsah tokenu
                - public - neencryptnute, ako jws, pouzivaju public/private kluce 
            - payload - najdolezitejsie nbf a exp, registed claims - to iste ako v jwt
            - footer - optional kid
            - public kluc je v payloade na konci - tym ze je fixny format nemusi byt oddelene bodkou
        - vyhody - menej miesta na ludku chybu
        - nevyhody - stale draft - 2 RFC - jedna pre nove crypto funkcie, nezavisla na paseto, jedna konkretne paseto specs
    - Macaroons
        - zaklad HMAC - hash-based message authentication code
            - hash samo o sebe je jednosmerna crypto funkcia, vieme len zahashovat nie odhashovat
            - authentication - nie iba hash ale hash vypocitany pomocou nejekeho secret key - teda len clovek s klucom vie overit hash
        - zacina sa s jednym tajnym klucom, ktory vie vsetko
        - pomocou hmac vyrobim podpis a ten pridam do tokenu
        - dalsi token vyrobim tak ze zoberiem podpis, pridam obmedzenie spravim hmac pomocou predosleho tokenu ako kluca a pridam podpis
        - takto vzdy niekto s tokenom z nejekej urovne vie overit tie pod nim
        - 3rd party caviates -> 
            - vyrobim si novy kluc - lubovolny
            - hmacnem pomocou predosleho kluca a moj kluc dam ako caviat - takto pozna moj kluc kazdy co poznal predosly kluc
            - hmacnem public svoj kluc + nejake metadata pomocou public kluca tretej strany - tretia strana pozna moj kluc
            - poslem to niekomu, kto pouziva tretiu stranu - nepozna moj kluc - posle to tretej strane, ona pomocou svojho kluca ziska moj kluc - pomocou neho moze vytvarat nove macaroons (discharge macaroons) s novymi caviates s mojim klucom ako povodnym tajomstvom
            - povodny server co vie tajomstvo vyssie ako ja, si vie ziskat moj novy kluc (lebo pozna vyssi kluc) a pomocou neho vie overit discharge macaroon, lebo tie pouzivaju ako najvyssie tajomstvo moj kluc
        - nevyhody - nemaju official specs, iba writepaper od googlu - mozu byt rozdiely ako sa pouzivaju rozne caviates, zlozite 3rd party caviates
        - vyhoda - existuje Cbased implementacia rescrv/libmacaroons - defacto standard (vseobecne akceptovana implementacia v praxi)

google white paper Macaroons - https://storage.googleapis.com/pub-tools-public-publication-data/pdf/41892.pdf
    - cielom macaroons je spojit vyhody viacerych pristupov - bearer tokens, flexibilnost certifikatov s verejnymi klucmi, rychle kryptograficke primitiva, 
    - caveats(vyhrady) umoznuju delegovanie autority medzi domenami s utlmom a kontextovymi obmedzeniami
    - zakladom je retazove skladanie hmac hodnot, co zaroven zabezpecuje distribuciu klucov
    - 

biblia bezpecnosti pri API - https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html


protobuf - https://en.wikipedia.org/wiki/Protocol_Buffers
    - data format pre serializaciu strukturovanych dat
    - vyuziva sa na komunikaciu mikroservisov tvoriacich vacsi syst√©m alebo na ulozenie dat
    - obsahuje aj interface description language - popisuje strukturu dat a program na generovanie alebo parsovanie streamu dat danej struktury
    - developnute v google
    - vyuzivaju na ukladanie dat a komunikaciu servisov - ponukaju konkretny RCP stack -> gRCP
    - serializacia je spatne aj dopredu kompatibilna ale nie self-explaining, 
    treba metadata o schceme na spracovanie
    - lebo sa to serializuje na byte wire

JWT - https://jose.readthedocs.io/en/latest/#f1
    - fajn obkec o jwe, jws, jwk, jwt
    - jwt - json s klucom, staci {k: 'kluc'}
    - jws - claim su len base64 zakodovane a daju sa teda citat, podpis na autentickost
    - jwe - zasifrovane

JWT zranitelnosti - https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/
    - none algortimus - hocikto si vie vyrobit platny token - aaaah!!
    - RSA/HMAC utok
        - vyrobim HMAC z tokenu s public klucom pouzivanym na overenie RSA
        - napisem do alg hlavicky ze to je HMAC - najcastejsie HS256
        - server ocakava RSA podpisane tokeny a vo vela implementaciach je to to iste volanie, co si prezita z alg hlavicky alg a ju mu len dam kluc, teda dam mu public kluc pre RSA ale v hlavicke najde volanie ze je to HMAC tak to overi symetricky a to bude platne lebo naozaj som to tym klucom podpisala 

JOSE - https://datatracker.ietf.org/doc/rfc7165/
    - JSON object signing and encryption
    - definuje use casy a poziadavky na secure JSON format objekty - podla aktualne pouzivanych aplikacii bezpecnych mechanizmov
    - definuje 3 JSON objekt formaty 
        - Integrity-protected object format (JWE)
        - Confidentiality-protected object format (JWS)
        - A format for expressing keys (JWK)
    - algortimy a ich identifikatory pouzivne v JWE, JWS a JWK su definovane v JWA

rozdiely JOSE, JWT, JWS, JWE, JWK, JWA - https://stackoverflow.com/questions/74257560/what-is-the-difference-between-jose-jwa-jwe-jwk-jws-and-jwt
    - dost dora odpoved aj strucna aj dlha

replay attack - https://security.stackexchange.com/questions/64541/can-i-prevent-a-replay-attack-of-my-signed-jwts
    - odchytis token a pouzivas na vela volania
    - da sa s tym nieco robit?? 

fernet, blanca, paseto - https://www.scottbrady91.com/jose/alternatives-to-jwts
    - fernet a blnca nove tokeny

PASETO algorithm lucidity - https://github.com/paseto-standard/paseto-spec/blob/master/docs/02-Implementation-Guide/03-Algorithm-Lucidity.md
    - dokument popisujuci ako mas implementovat paseto aby si predisiel algoritmus confiouson utokom

PASETO standard - https://github.com/paseto-standard/paseto-spec
    - 3-4 casti oddelene bodkou
    - verzia.ciel.telo.(pata)
    - kazda verzia ma local a public
        - local je symetricke sifrovanie tela plus hmac "podpis" na autentickost
        - public je nesifrovane telo, cely token je podpisany asymetricky
    - pata je optional, moze obsahovat lubovolnu info, nikdy sa nesifruje, ale pocita sa z nej hmac alebo podpis
    - povodne verzie 1,2 - 3,4 novsie
    - 3,4 riesie niektore krypto nedostatky - novsia a lepsie funkcie crypto a pridavaju moznost implicitnej informacie 
        - implicitna informacia je taka, z ktorej sa pocita podpis ale nie je v tokene
        - navyse v3 podpisy zarucuju jednoznacne autorstvo (v4 funkcia to robi sama o sebe)

fernet - https://github.com/fernet/spec/blob/master/Spec.md
    - specka
    - zasifrovany a potom hmacnuty - AES 128 in CBC mode + 256-bit SHA256 HMAC
    - 5 casti - verzia, IV, timestamp, sifrovany text, hmac
    - nakoniec cele base64 zakodovane
    - povodne developnute v heroku ako bezpecny format pre posielanie sprav (asi v ruby)
    - teraz vela implementacii, pouziva sa napriklad v openstack - https://www.redhat.com/en/blog/introduction-fernet-tokens-red-hat-openstack-platform

fernet heroku original
    - Harold Gim√©nez autor, minimalne drzi lecenciu
    - heroku/legacy-fernet - https://github.com/heroku/legacy-fernet
    - teraz ruby implementacia na https://github.com/fernet/fernet-rb
    - specka na https://github.com/fernet/spec/blob/f16a35d3cfd8cdb2d8c7f7d10ce6c4d6058b19d2/Spec.md (da sa tam preklikat z predosleho a to toho sa da preklikat z legacy)


branca - https://github.com/tuupola/branca-spec
    - vychadza z fernet a kusok paseto
    - pouziva chacha polly - resitne proti replay utokom
    - verzia, timestamp, nonce, sifrovane telo, tag
    - timestamp je tiez pocet sekund ale 32 bitovy, aby vydrzal dlhsie pouziva unsigned
    - celkovo ciel je zjednodusit a zkratit token
    - nonce nie iv lebo nepouziva blokovu sifru

macaroons - https://github.com/rescrv/libmacaroons
    - implemnetacia v c a pythone
    - vyuziva location, secret a identifier pri vyrobe
    - po pridani cavetov sa vzdy spravi novy podpis
    - unikatny secret pre kazdu macaroon - identifier mi hovori aky kluc som pouzila pri vyrobe konkretneho tokenu
    - sha1 je sice prelomene ale nevadi lebo to trvalo dlho a tu sa to pouziva na shortlived tokeny

macaroons in hyperdex - https://hackingdistributed.com/2014/11/23/macaroons-in-hyperdex/
    - dost detailny clanok

typek hovori o papri - https://www.youtube.com/watch?v=KvOGXqgHjyE
    - nie moc detailne vysvetluje veci
    - fajn prehlad, dobre otazky od publika

vyzera byt dobry clanok - https://evancordell.com/posts/macaroons-101-contextual-confinement/

playground macaroons - http://macaroons.io/

macaroons paper - https://static.googleusercontent.com/media/research.google.com/sk//pubs/archive/41892.pdf
    - na citaciu mam lepsi link bookmarknuty
    - citacia 55 - auth facebook dropbox
    - citacia 14 - SPKI/SDSI mal by byt predchodca macaroons
    - citacie 3, 25, 51 - nested hmac generalizuju nieco co fungovalo v OS Amoeba
    - citacia 37, 53 - ine auth modely, pouzivaju public key certifikaty, moc sa  nevyuzivaju
    - citacie 19 (sekcia 6), 48 (kapitola 4.8) - revocation problemy tokenov
    - citacia 18, 37 sekcia 4.3 - ako implementovat key identifier
    - problem s revokaciou sa riesi typicky 4 sposobmi
        - velmi short lived tokeny
        - dovolenie freshness obmedzenia
        - externy autoritativny stav (napr revocation list)
        - rozdelenie povereni (credentials) - autorizacia len novym kolekciam
        - macaroons sa daju lahko pouzivat so vsetkymi 4 sposobmi
    - TS - target servis vydava macaroons
    - vedia zuzit rozsah veci co sa daju robit s TS a kontextovo obmedzit kto, odkial a s akym extra dokazom to vie spravit
        - obmezuje sa pomocou caveats
        - kazdy caveat je predikat
        - aby bol token platny musi sa kazdy predikat v kontexte daneho requestu vyhodnotit pravdivo
        - velka vyhoda: hocickto vie pridat caveat bez toho aby komunikoval s TS, ale iba TS vie overit token

    - citacia 21 - chanelIID 
    - 3. party caveats pouzivaju holder of key proof - autentifikujes sa tym ze dokazes ze vlastnis nejaky kluc, napriklad podpises nieco sukromnym klucom
        - napr. namiesto casoveho obmedzenia tokenu, bude 3. party caveat vyzadujuci dokaz od revocation-service, ktory vybije dany caveat
    - teda nejake volanie co autorizuje macaroon, moze byt vdaka 3. party caveatom autorizovane alebo autentifikovane, pripadne auditovane  vela inymi servismi
    - format
        - retazec sprav 
            - prva identifier, pre verejnost nepriehladna hodnota 
                - moze byt kluc do databazy kde je ulozeny root key
                - keyed HMACs
                - alebo enrypction citacia 37, Sections 4.2 and 4.3
            - dalsie caveats
        - podpis - nested hmac

    - vyroba
        - hmac z identifikatora kluca pridana lokacia
        - pridanie caveatov, po kazdom novy podpis pomocou hmac, kde ako kluc ide predosly podpis
        - 3rd party caveats vyrobis tak, ze vyrobis caveat root key, zasivrujes ho pomocou aktualneho podpisu, to bude identifikator kluca a potom vyrobis novy caveat z identifikatora caveatu (co musi byt splnene) a identifikatora kluca a to podpises hmacom s aktualnym podpisom ako klucom

    - pozitie tokenu userom
        - toto das userovi
        - on najde ze tam je 3rd party caveat a potrebuje discharge
        - z location v tomto caveate vie kam si ma ist vypytat discharge token
        - posle do lokacie identifikator caveatu
        - tento servis si z toho vytiahne root key a predikat
        - overi ci predikat plati, nato moze naprikalad vyzvat usera na prihlasenie
        - vyrobi discharge token - z kluca co vytiahol a identifikarora
        - moze pridat dalsie caveats - po jednom podpisuje
        - posle naspat userovi
        - na koniec user musi bindnut vsetky discharge tokenu k hlavnemu tokenu, aby sa nedali zneuzit tie dischage niekym inym - napriklad po odchyteni nejakym fising servisom, ze bude sa tvarit ako target servis a user mu posle aj svoje discharge a tie potom pouzije utocnik ako dokaz pre 3rd party caveaty -> TODO popisem az v porovnani
    
    - overenie
        - skontrolujes platnost predikatov vo 1st party caveatoch v kontexte poziadavky
        - najdes 3rd party caveaty, desifrujes root key caveatu
        - podla caveat identifikatora najdes zodpovedajuci dischage token
        - overi platnost dischargu rekurzivne s root klucom caveatu
        - na koniec postupne vytvori vsetky podpisy a overi podpis tokeny

    - root kluce hlavne pre 3rd party caveaty by mali byt rozne, lebo po overeni ich bude poznat target servis a moze sfalsovat dischage tokeny, hlavne ked sa pouziva viac target servisov
    - root key caveatu sa da spravit ako hmac(sig, n), kde n je nonce
    
bicuits specka - https://github.com/biscuit-auth/biscuit/blob/master/SPECIFICATIONS.md
    - pouzivaju asymtricku kryptografiu, konkretne digitalne podpisy
    - key id ulozeny v tokene - aby som vedela, z ktoreho tajneho kluca som to vyrobila
    - je poskladany z blokovej
        - prvy blok authority - prida ten co vytvoril token, definuje prava drzitela tokenu
        - dalsie bloky - definuju checks, moze pridat hocikto, no nedaju sa odobrat bez invalidovania podpisu
        - lokicky jazyk pouzity na dizajnovanie prav, cekov a dat je variant datalogu bez negacie a len na niektorych data types - je citacia v specke
        - query je datalog query - pravidlo bez hlavy
        - check je zoznam quries, query je splenena ak vyprodukuje nejaky fakt, aby bol check splneni musi byt aspon jedna query splnena
            - check if - jeden set faktov co matchol body splni
            - check all - vsetky sety faktov co matchli body splnili
        - policies - zoznam queries, ak nejaka query vyrobi nejaky fakt policy matchne a skoncili sme, inak pokracujeme na dalsiu policy. Su allow aj deny policies - ak matchne allow token je platny ak matchne deny je zamietnuty
        - policies sa testuju po tom co prebehnu checky
        - ak nematchne ziadna policy, verification failne
        - queries aj rules mozu mat v tele aj expreson na argumentoch predikatov, musi sa vyhodnotit na bool, definovane operacie su v specke

        - navyse mozu byt dalsie fakty a rules v autorizrovy, nezavisle od tokenu

        - rules a checks bloku mozu pracovat len s faktami zo svojho a predoslych blokoch, tymto sa zamedzuje tomu aby si mohol niekto novym blokov zvysit pravomoc
            - navyse rules chceck a policies definovane autorizerom pracuju len s faktami z authority bloku alebo s tymi definovanymi v autorizrovy

        - trusted anotacie - by default (a tie su trusted vzdy) je trusted len authority, current block a to co je v autorizrovi, da sa zmenit na vsetky predosle alebo tie podpisane nejakym danym public klucom
        - verifier vytvori fakty na zaklade kontextu - napriklad operation - read/write, the resource accessed, and more ambient data like the current time, source IP address, revocation listsss

        - najprv sa deserializuje podla protobuf formatu bisquits, potom sa overi ze public key v authotity blocku je ten root key co ocakavam

        - vytvori sa revocation list - revocation identifier blocku je jeho podpis, lebo ten ho jednoznacne urcuje - potom sa prirobia fakty revocation_id (block_id, podpis)

        - aktualny format - https://github.com/biscuit-auth/biscuit/blob/master/schema.proto

        - kazdy blok ma svoj podpis a tiez definuje public kluc, ktorym sa ma overit podpis dalsieho bloku
            - vytvaranie noveho bloku - vyrobit novy par pk, sk, sk vygenerovany poslednym blokom je vzdy v tokene zapisany v proof hlavicke
            - vyrobi sa podpis pomocou kluca v proofe
            - do proofu sa zapise vygenerovany sk

            - moze byt blok podpisany aj external epk, esk parom, potom obsahuje blok epk a esign a esign je tiez podpisany normalnym sk, ktorym sme podpisovali tento blok (teda tym co bol v proof)

            - podpisovanie funguje rovnako az nato ze sa podpisuje ako payload pk, ktory sa pouziva na verifikaciu tohto bloku (normalne sa podpisuje ten dalsi) -> kvoli tomu aby sa nedal externy podpis pouzit na token, preto je zviazany s pk predosleho bloku

            - sig_n = (sk_n, data_n, + esig_n + pk_n+1)
            - esig_n = (esk, data_n + pk_n)

    - verifikacia - postupne sa po blokoch spravi verify(pk_i, sig_i, data_i + pk_i+1)
    - verifikacia externeho podpisu - verify(epk_i, esig_i, data_i + pk_i)
    - nakonci sa este overi ci pk_last je par so sk_last v proofe
    - mozeme sealnut token aby sa uz nedal pridat blok - podpiseme sk_last obsah posledneho tokenu spolu s podpisom tohto bloku -> do proof sa da vyrobeny podpis

    - ako pracovat s tretou stranou -> pridam check, ktory trustuje pk tretej strany a potom mozem mat naroky na fakty, ktore dava az blok, ktory pridala tretia strana, tretia strana moze pridat blok az ked je nieco splnene

    - pouziva sa ed25519 funkcia na vyrabanie public klucov



navrh kapitol:
    1. vyuzitie api tokenov - preco potrebujeme api tokeny a ich rozdiely oproti inym sposobom autentifikacia a autorizacie (api keys, meno heslo, session)
    2. zname a v praxi pouzivane api tokeny - predstavenie roznych typov tokenov, ktore sa vyuzivaju v praxi
    3. teoreticke parametre tokenov - porovnanie tokenov ohladom na bezpecnost, skalovatelnost, flexibilitu
    4. prakticke parametre tokenov - porovnanie tokenov vzhladom na jednoduchost implementacie a rychlost 
    5. porovnanie na jednoduchom rozhrani - navrh a implementacia jednoducheho rozhrania s pouzitim viacerych typov tokenov a nase pozorovanie pri ich pouziti

navrh porovnania:
    - pocet pouzivanych krypto funkcii v specifikacii, ak neni specifikacia, tak v nejakej popularnej implementacii
    - s tym spojena nachylnost implementacie na confiouson alg utok
    - podpora sifrovania obsahu
    - nutnost zistit pouzity algoritmus z tokenu (nejak to tam treba napisat, ked je viac algoritmov, ale da sa to spravit pomocou identifikatora kluca, co moze identifikovat aj alg, pre pozorovatela nepriehladna hodnota)
    - podpora 3rd party poziadaviek
    - schopnost zoslabovat pravomoci
    - hocikto vie overit autenticitu a integritu tokenu
    - bezstavove overenie (jednoducha implementacia macaroons ma databazu korenovych klucov)
    - standarne overovanie (nejake dane claim sety, macaroons vobec)
    - udrziavana implementacia v popularnych jazykoch (js, c, python, java,..), nejeka specifikia
    - kolko projektov to pouziva
    - mozno aj take "abstraktnejsie" - flexibilita/skalovatelnost, mozno porovanat to pomocou nejakych mensich, napr z 3rd party poziadaviek

CO SA CHCEM SPYTAT:
    - ked popisujem technologiu staci dat citaciu papra na zaciatok a potom popisat?

    DONE:
    - je ok pouzivat slova ako servis - sluzba a cloud?
    - macaroons fakt ze nemaju preklad, najblizsie je asi kokosove pusinky a to sa mi nezda moc dobre - neprekladat
    - zatial mam tokeny jwt, paseto, fernet, branca, macaroons, este by som dala cat (mozno), Biscuits, oauth ani protobuf nie su tokeny, biscuits vyzera zaujimavo, nejake macaroons s datalogom
    - preco treba pri hmacu novy kluc za kazdy token? 
    - pride mi nejak vela ked tam pisem o kazdom tokene ako funguje, ale neviem si predstavit pisat porovnanie bez toho


TODO: 
- hmac citaciu vyriesit

- bisquits 3rd party blok pridanie