https://thenewstack.io/the-different-token-types-and-formats-explained/

rozne typy tokenov podla toho naco sa pouzivaju:
    - access token -> typicky opaque token, autorizacia usera apinou, nie na autentifikaciu
    - bearer token -> pouzitie access tokenov, bearer tokenu ma ziska access, ziadne kontroly apinou ani aplikaciou, ze odosielatel je ten co ma dostat access
    - sender constrained tokens -> pouzije sa cryptografia aby sa token zvialal s appkou, pomocou niecoho co vie len appka - sukromny kluc
    - refresh tokens -> access tokeny maju kratku trvacnost, po ktorej uplynuti by sa musel user opat autentifikovat, preto som s access tokenom vydava aj refresh token, pomocou ktoreho ziska user novy access token bez nutnosti autentifikovania
    - id token -> jwt - info o userovi, vystup z openid connect (OIDC), sluzi len na autentifikaciu, nie autorizaciu, neposiala sa dalsej apine

formaty tokenov:
    - opaque token  (referencia) -> nahodny string, nenesie ziadnu info appke ani apine, no na overie ich platnosti treba databazu s metadami o tokenoch - vydanie, platnost, appka, token introspection
    - structured (hodnota) -> hlavicka, telo, podpis - ma vela info, musi byt encryptnuty aby nebol precitany hocikym, podpis zabezpecuje len integritu
    - phantom tokens -> kombinacia opaque a structured, pouzitie api gateway/reverse proxy medzi klintom a apinov. Klient dostane opaque token a ten posiela s requestami apine, requesty najpv idu cez proxynu a ta spravi introspection (call na dalsi servis) odkial dostane structured token a ten posle apine. Vyhoda je ze proxyna moze structured tokeny cachovat. Klient sa nedostane k citlivym udajom zo structured tokenu
    - split tokens -> rozdelenie structured tokenu na podpis a zvysok. Klient sa autentifikuje a apina mu vrati podpis z vygenerovaneho structured tokenu, podpis zahashuje a spolu so zvyskom ho posle proxyne, ktora si zacachuje tento token, hash podpisu pouzije ako kluc a zvysok ako hodnotu. Tym padom proxyna nerobi ziadne dalsie volania, iba pozera do cache a nikto nema cely token u seba.
    - token handler -> pouzitie pri single page appke. Prehliadace robia tazke pre appky pouzivat 3rd party cookies kvoli prevencii trackovania a navyse SPA nevie tak dorbe ochranit token ako cookie. Riesenie: token sa nevyda pre SPA ale pre token handler na proxy/gateway a ta vytvori cookie co posle SPA. Ked chce SPA spravit api volanie, posle cookie token handlerovi a ten spravi call

trendy API bezpenosti - https://curity.io/blog/api-security-2023-trends/?utm_source=thenewstack&utm_medium=website
    - api kluce nie su moc bezbepecne
    - treba pouzivat autentifikacnu a autorizacnu schemu na zaklade tokenov
    - jwt su fajn, ale pozuivat iba interne, neposkytovat tretim stranam, na to pouzivat opaque
        - pomocou fantom a split token vzorov sa daju pouzivat jwt u seba a opaque vonku


https://zapier.com/engineering/apikey-oauth-jwt/
    - api key -> jednoduchy sposob ako pouzivat api, staticka vec garantujuca access ku vsetkemu, bezpecnoste rizko, hlavne ak sa posiela ako query string v url, lepsie v authorization header. Pre developera fajn, pre usera nic moc, casto nevie co je api vobec a kde ma zobrat kluc.
    - OAuth - OAuth2.0 standard na autorizaciu voci apine, vyuziva access a refresh token


https://fly.io/blog/api-tokens-a-tedious-survey/
    - IAM -> identity and access management
    - JWT -> problem lebo nejasne co musis napisat, aky sifrovaci algoritmus sa pouziva, ci je symentrcke/asymetricke sifrovanie
    - PASETO -> lepsi JWT - snazi sa obmedzit co mozes pouzit a nemeni parametre ale verzionuje cely protokol, problem je ze su 4 aktivne verzie..
    - Protocol Buffer Tokens (protobuf) -> definuje silno typovany protokol format, mame token a signed token. Token - semantika => strigify, podpisem, vlozim do signed tokenu aj s podpisom.
    - CAT -> crypto auth token, cat server ma root key - apine vytvori token z tohto kluca a jej identity, appkam ktora sa autentifikuju cat serveru a budu chciet mat pristup k apine vyrobi creation key z tokenu ktory vyrobil apine, takto si vie apina lahko verifikovat token od appky, appka si vie vyrobit token pomocou HMAC z tohto creation key a svojej identity. Netreba zdielane tajomstvo pre kazde spojenie dvojice appka apina. Apina a cat server sa voci sebe autetifikuju pomocou certifikatou v TLS spojeni.
    - Macaroons -> server vie vydat golden ticket a pridat nanho ombedzenia (caveats) - kazde ombedzenia sa vyraba z predosleho mac pomoucou pridania listu obmedzeni a hmacnutia tokenu, kazdy s vyssiou urovnou vie overit
    - Biscuits -> podobne ako macaroons, ale pri pridavani obmedzeni tokenov namiesto zahashovania noveho tokenu zo stareho a obmedzeni pouzitim HMAC, vyuzivaju podpisovanie a verejne kluce, naco neexistuje moc jednoduchi sposob ako to spravit z predostleho tokenu a obmedzenia. Obmedzenia nie su len boolean ale datalogove programy

https://www.youtube.com/watch?v=dlmaujVVPII
    - o skturturovanych - nemusis mat databazu, overujes stateless, moze byt read stateless overenie, write stateful - lookup v databaze sessionov, ci je este aktualny
    - JWT -> JWE (encryption) alebo JWS (signature), vacsinou JWS - o tom bude rec
        - JOSE specs - javascript object signing and encryption
        - na skussanie jwt - https://token.dev/, dekodovanie base64 - https://codebeautify.org/base64-decode
        - hlavicka, telo, kluc -> vyrobi sa string base64 kodovanim z hlavicky a tela, oddelene bodkou, na konci podpis vyrobeny pomocou kluca
        - v hlavicke alg property - hmac (hs256)/private + public key (es512)/none(cisty JSON)
        - kluc-hodnota pary su claims - 3 typy
            - registered - kluce definovane v specke jwt
            - public - z inych protokolov (napr. OpenID connect ma name v payloade)
            - private - hocico co si dopisem
            - regitered su hlavicka (typ, alg, optional kid - id kluca pouizteho na podpis), telo(sub - komu je urceny token, nbf - not before, exp - expiration date)
        - validacia 
            - dekodujem hlavicku - mam alg, pripadne kid - vygenerujem podpis a porovnam s podpisom v tokene
            - validacia tela - dekodujem ho, skontrolujem ci som medzi nbf a exp
        - JWE este nevyse encrypted telo, jednotlive claims - ma viac sekcii v stringu (5 namiesto 3)
        - problemy - moc vela moznosti 
            - jws - 13 alg moznosti, jwe - 17 moznosti
            - none alg!!!
    - PASETO -> Platform Agnostic SEcurity TOken
        - snazi sa opravit chyby jwt
        - zjednodusuje jwt
        - paseto implementacie - https://paseto.io/
        - a skusanie tiez - https://token.dev/paseto/
        - tiez base64 zakodovane - <verzia>.<purpose>.<payload>.<footer>
            - version - 1,2,3,4 - rozlisuje krypto funkcie pouzite na podpisovanie/sifovanie
            - purpose - local/public
                - local - encrypted + shared key - kazdy lokalnou kopiou kluca vie precitat obsah tokenu
                - public - neencryptnute, ako jws, pouzivaju public/private kluce 
            - payload - najdolezitejsie nbf a exp, registed claims - to iste ako v jwt
            - footer - optional kid
            - public kluc je v payloade na konci - tym ze je fixny format nemusi byt oddelene bodkou
        - vyhody - menej miesta na ludku chybu
        - nevyhody - stale draft - 2 RFC - jedna pre nove crypto funkcie, nezavisla na paseto, jedna konkretne paseto specs
    - Macaroons
        - zaklad HMAC - hash-based message authentication code
            - hash samo o sebe je jednosmerna crypto funkcia, vieme len zahashovat nie odhashovat
            - authentication - nie iba hash ale hash vypocitany pomocou nejekeho secret key - teda len clovek s klucom vie overit hash
        - zacina sa s jednym tajnym klucom, ktory vie vsetko
        - pomocou hmac vyrobim podpis a ten pridam do tokenu
        - dalsi token vyrobim tak ze zoberiem podpis, pridam obmedzenie spravim hmac pomocou predosleho tokenu ako kluca a pridam podpis
        - takto vzdy niekto s tokenom z nejekej urovne vie overit tie pod nim
        - 3rd party caviates -> 
            - vyrobim si novy kluc - lubovolny
            - hmacnem pomocou predosleho kluca a moj kluc dam ako caviat - takto pozna moj kluc kazdy co poznal predosly kluc
            - hmacnem public svoj kluc + nejake metadata pomocou public kluca tretej strany - tretia strana pozna moj kluc
            - poslem to niekomu, kto pouziva tretiu stranu - nepozna moj kluc - posle to tretej strane, ona pomocou svojho kluca ziska moj kluc - pomocou neho moze vytvarat nove macaroons (discharge macaroons) s novymi caviates s mojim klucom ako povodnym tajomstvom
            - povodny server co vie tajomstvo vyssie ako ja, si vie ziskat moj novy kluc (lebo pozna vyssi kluc) a pomocou neho vie overit discharge macaroon, lebo tie pouzivaju ako najvyssie tajomstvo moj kluc
        - nevyhody - nemaju official specs, iba writepaper od googlu - mozu byt rozdiely ako sa pouzivaju rozne caviates, zlozite 3rd party caviates
        - vyhoda - existuje Cbased implementacia rescrv/libmacaroons - defacto standard (vseobecne akceptovana implementacia v praxi)

google white paper Macaroons - https://storage.googleapis.com/pub-tools-public-publication-data/pdf/41892.pdf
    - cielom macaroons je spojit vyhody viacerych pristupov - bearer tokens, flexibilnost certifikatov s verejnymi klucmi, rychle kryptograficke primitiva, 
    - caveats(vyhrady) umoznuju delegovanie autority medzi domenami s utlmom a kontextovymi obmedzeniami
    - zakladom je retazove skladanie hmac hodnot, co zaroven zabezpecuje distribuciu klucov
    - 

biblia bezpecnosti pri API - https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html


protobuf - https://en.wikipedia.org/wiki/Protocol_Buffers
    - data format pre serializaciu strukturovanych dat
    - vyuziva sa na komunikaciu mikroservisov tvoriacich vacsi syst√©m alebo na ulozenie dat
    - obsahuje aj interface description language - popisuje strukturu dat a program na generovanie alebo parsovanie streamu dat danej struktury
    - developnute v google
    - vyuzivaju na ukladanie dat a komunikaciu servisov - ponukaju konkretny RCP stack -> gRCP
    - serializacia je spatne aj dopredu kompatibilna ale nie self-explaining, 
    treba metadata o schceme na spracovanie
    - lebo sa to serializuje na byte wire

JWT - https://jose.readthedocs.io/en/latest/#f1
    - fajn obkec o jwe, jws, jwk, jwt
    - jwt - json s klucom, staci {k: 'kluc'}
    - jws - claim su len base64 zakodovane a daju sa teda citat, podpis na autentickost
    - jwe - zasifrovane

JWT zranitelnosti - https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/
    - none algortimus - hocikto si vie vyrobit platny token - aaaah!!
    - RSA/HMAC utok
        - vyrobim HMAC z tokenu s public klucom pouzivanym na overenie RSA
        - napisem do alg hlavicky ze to je HMAC - najcastejsie HS256
        - server ocakava RSA podpisane tokeny a vo vela implementaciach je to to iste volanie, co si prezita z alg hlavicky alg a ju mu len dam kluc, teda dam mu public kluc pre RSA ale v hlavicke najde volanie ze je to HMAC tak to overi symetricky a to bude platne lebo naozaj som to tym klucom podpisala 

JOSE - https://datatracker.ietf.org/doc/rfc7165/
    - JSON object signing and encryption
    - definuje use casy a poziadavky na secure JSON format objekty - podla aktualne pouzivanych aplikacii bezpecnych mechanizmov
    - definuje 3 JSON objekt formaty 
        - Integrity-protected object format (JWE)
        - Confidentiality-protected object format (JWS)
        - A format for expressing keys (JWK)
    - algortimy a ich identifikatory pouzivne v JWE, JWS a JWK su definovane v JWA

rozdiely JOSE, JWT, JWS, JWE, JWK, JWA - https://stackoverflow.com/questions/74257560/what-is-the-difference-between-jose-jwa-jwe-jwk-jws-and-jwt
    - dost dora odpoved aj strucna aj dlha

replay attack - https://security.stackexchange.com/questions/64541/can-i-prevent-a-replay-attack-of-my-signed-jwts
    - odchytis token a pouzivas na vela volania
    - da sa s tym nieco robit?? 

fernet, blanca, paseto - https://www.scottbrady91.com/jose/alternatives-to-jwts
    - fernet a blnca nove tokeny

PASETO algorithm lucidity - https://github.com/paseto-standard/paseto-spec/blob/master/docs/02-Implementation-Guide/03-Algorithm-Lucidity.md
    - dokument popisujuci ako mas implementovat paseto aby si predisiel algoritmus confiouson utokom

PASETO standard - https://github.com/paseto-standard/paseto-spec
    - 3-4 casti oddelene bodkou
    - verzia.ciel.telo.(pata)
    - kazda verzia ma local a public
        - local je symetricke sifrovanie tela plus hmac "podpis" na autentickost
        - public je nesifrovane telo, cely token je podpisany asymetricky
    - pata je optional, moze obsahovat lubovolnu info, nikdy sa nesifruje, ale pocita sa z nej hmac alebo podpis
    - povodne verzie 1,2 - 3,4 novsie
    - 3,4 riesie niektore krypto nedostatky - novsia a lepsie funkcie crypto a pridavaju moznost implicitnej informacie 
        - implicitna informacia je taka, z ktorej sa pocita podpis ale nie je v tokene
        - navyse v3 podpisy zarucuju jednoznacne autorstvo (v4 funkcia to robi sama o sebe)

fernet - https://github.com/fernet/spec/blob/master/Spec.md
    - specka
    - zasifrovany a potom hmacnuty - AES 128 in CBC mode + 256-bit SHA256 HMAC
    - 5 casti - verzia, IV, timestamp, sifrovany text, hmac
    - nakoniec cele base64 zakodovane
    - povodne developnute v heroku ako bezpecny format pre posielanie sprav (asi v ruby)
    - teraz vela implementacii, pouziva sa napriklad v openstack - https://www.redhat.com/en/blog/introduction-fernet-tokens-red-hat-openstack-platform

fernet heroku original
    - Harold Gim√©nez autor, minimalne drzi lecenciu
    - heroku/legacy-fernet - https://github.com/heroku/legacy-fernet
    - teraz ruby implementacia na https://github.com/fernet/fernet-rb
    - specka na https://github.com/fernet/spec/blob/f16a35d3cfd8cdb2d8c7f7d10ce6c4d6058b19d2/Spec.md (da sa tam preklikat z predosleho a to toho sa da preklikat z legacy)


branca - https://github.com/tuupola/branca-spec
    - vychadza z fernet a kusok paseto
    - pouziva chacha polly - resitne proti replay utokom
    - verzia, timestamp, nonce, sifrovane telo, tag
    - timestamp je tiez pocet sekund ale 32 bitovy, aby vydrzal dlhsie pouziva unsigned
    - celkovo ciel je zjednodusit a zkratit token
    - nonce nie iv lebo nepouziva blokovu sifru

    
navrh kapitol:
    1. vyuzitie api tokenov - preco potrebujeme api tokeny a ich rozdiely oproti inym sposobom autentifikacia a autorizacie (api keys, meno heslo, session)
    2. zname a v praxi pouzivane api tokeny - predstavenie roznych typov tokenov, ktore sa vyuzivaju v praxi
    3. teoreticke parametre tokenov - porovnanie tokenov ohladom na bezpecnost, skalovatelnost, flexibilitu
    4. prakticke parametre tokenov - porovnanie tokenov vzhladom na jednoduchost implementacie a rychlost 
    5. porovnanie na jednoduchom rozhrani - navrh a implementacia jednoducheho rozhrania s pouzitim viacerych typov tokenov a nase pozorovanie pri ich pouziti

@misc{chacha_poly,
    author =    {S. Arciszewski},
    note   = {\url{https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha-03}},
    title =     {XChaCha eXtended-nonce ChaCha and AEAD_XChaCha20_Poly1305},
}

@INPROCEEDINGS{base62,
  author={Kejing He and Xiancheng Xu and Qiang Yue},
  booktitle={2008 11th IEEE Singapore International Conference on Communication Systems}, 
  title={A secure, lossless, and compressed Base62 encoding}, 
  year={2008},
  volume={},
  number={},
  pages={761-765},
  doi={10.1109/ICCS.2008.4737287}
}

\section{Branca}

(√Åno naozaj tento token vznikol ako p√°rodia na "lep≈°√≠" fernet a teda Fernet-Branca). Motiv√°ciou k vzniku Branca tokenu bolo modernizovanie Fernet tokenu. Branca m√° podobn√∫ ≈°trukt√∫ru aj generovanie a valid√°ciu ako Fernet. Branca sa najm√§ l√≠≈°i v tom, ≈æe vyu≈æ√≠va ≈°ifrovaciu a podpisov√∫ funkciu XChaCha20-Poly1305 AEAD.

\subsection{≈†trukt√∫ra Branca}

Branca sa podobne ako Fernet sklad√° z piatich zre≈•azen√Ωch ƒçast√≠. Tieto ƒçasti sa v≈°ak jemne l√≠≈°ia od ƒçast√≠ Fernet tokenu a zak√≥dovan√© s√∫ \textit{base62} k√≥dovan√≠m.

\begin{itemize}
    \item Verzia - reprezentuje verziu Branca tokenu, aktu√°lne existuje len jedna verzia a je reprezentovan√° ƒç√≠slom 0xBA. Zaber√° v≈ædy 8 bitov.
    \item ƒåasov√° peƒçiatka - reprezentuje ƒças vytvorenia tokenu. ƒåas je zachyten√≠ ako poƒçet sek√∫d od 1.1.1970 v UTC ƒçasovej z√≥ne. Zaber√° v≈ædy 32 bitov a je zap√≠san√° ako ƒç√≠slo bez znamienka.
    \item Nonce (ƒåiraz :D) - reprezentuje n√°hodn√Ω re≈•azec znakov, ktor√Ω vyu≈æ√≠va ≈°ifrovacia funkcia. Ide vpodstate o IV, ale vyu≈æ√≠va sa naozaj len raz, zatiaƒæƒço IV sa v blokovej ≈°ifre vyu≈æije viac kr√°t. Zaber√° v≈ædy 192 bitov.
    \item Za≈°ifrovan√© telo - reprezentuje za≈°ifrovan√© d√°ta ulo≈æen√© v tokene. M√¥≈æe ma≈• ƒæubovoƒæn√∫ dƒ∫≈æku.
    \item He≈°ovan√Ω autentifikaƒçn√Ω k√≥d - reprezentuje v√Ωstup funkcie Poly1305 a zaber√° v≈ædy 128 bitov.
\end{itemize}

\subsection{Generovanie a valid√°cia Branca}

Vygenerujeme 192 bitov√Ω re≈•azec znakov, ktor√Ω bude sl√∫≈æi≈• ako nonce a zachyt√≠me aktu√°lny ƒças do ƒçasovej peƒçiatky. Vyrob√≠me hlaviƒçku zre≈•azen√≠m verzie, ƒçasovej peƒçiatky a nonce. N√°sledne za≈°ifrujeme telo tokenu pomocou ≈°ifrovacej funkcie, do ktorej vlo≈æ√≠me tajn√Ω kƒæ√∫ƒç, nonce a ako dodatoƒçn√∫ inform√°ciu pou≈æijeme hlaviƒçku. Funkcia vr√°ti za≈°ifrovan√© telo a he≈°ovan√Ω autentifikaƒçn√Ω k√≥d vypoƒç√≠tan√Ω aj z hlaviƒçky. Nakoniec v≈°etky ƒçasti spoj√≠me do jedn√©ho re≈•azca a zak√≥dujeme pomocou \textit{base62} k√≥dovania.

Pri valid√°ci√≠ tokenu ho ako prv√© dek√≥dujeme. N√°sledne over√≠me, ≈æe prv√Ω bajt je 0xBA a rozdel√≠me na jednotliv√© ƒçasti. De≈°ifrujeme telo a over√≠me he≈°ovan√Ω autentifikaƒçn√Ω k√≥d pomocou fukncie XChaCha20-Poly1305 AEAD. N√°sledne m√¥≈æeme overi≈• napr√≠klad ƒçasov√∫ platnos≈• tokenu pomcou dodatoƒçn√Ωch inform√°ci√≠ v tele tokenu a ƒçasovej peƒçiatky.